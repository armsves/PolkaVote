{"noir_version":"1.0.0-beta.6+e796dfd67726cbc28eb9991782533b211025928d","hash":"1454671141816219978","abi":{"parameters":[{"name":"public_key_x","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"public_key_y","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"is_upvote","type":{"kind":"boolean"},"visibility":"private"},{"name":"message_hash","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"signature","type":{"kind":"array","length":64,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"H4sIAAAAAAAA/9WX13MTZxxFVzbFpCeY9AIhhXTJsrGchgkppPfesEGK03tvJtXpvTeD8Uv+ynBHq8lBOclDvH7gm/Hsz0ea1afVSveeWtFdi/v//izn2v6/wfKYNdTHasIGhA0KWyFspbBVwlYLGxK2Rtghwg4Vdpiww4UdIexIYUcJO1rYMcLWChsWtk7YscKOE3a8sBOEnSjsJGEnCztF2KnCThO2XtgGYacL2yjsDGFnCjtL2NnCNgk7R9i5ws4Tdr6wC4RdKOwiYXVhDWEjwprCRoWNCdssbFxYS9iEsIuFXSLsUmGXCbtc2BZhk8Xfv3k9tlWed4WwbcKuFHaVsKuFXSNsu7BrhV0n7HphNwi7UdhNwm4WdouwW4XdJux2YXcIu1PYXcLuFnaPsHuF3SfsfmEPCHtQ2EPCHha2Q9iUsGlhO4XtEtYW1hH2iLAZYY8Ke0zY48KeEPaksKeEPS3sGWHPCntO2PPCXhD2orCXhL0s7BVhrwp7Tdjrwt4Q9qawt4S9LWxW2G5h7wh7V9h7wt4X9oGwD4XNCftI2MfCPhH2qbDPhH0u7AthXwr7StjXwr4R9q2w74R9L+wHYT8K+0nYz8J+EfarsN+E/S7sD2HzYKvKYwFWw9zvIL2ZzrGy73y9mW4xhJkuQYegO9AZ6Ap0BLoBnYAuQAdg92fnZ9dnx2e3Z6dnl2eHZ3dnZ2dXZ0dnN1+PeQNmdvCNmNm52bXZsdmtN2Fml2aHZndmZ2ZXZkdmN2YnZhdmB2b3Zedl12XHZbdlp2WXZYdld2VnZVdlR2U3ncLM3N+JmTnPfGeuM89nMDO/mdvMa+Y085m5zDxmDjN/mbvMW+Ys85W5yjxljjI/mZvMS+Yk85G5yDycxbwbM3OPececY74x15hnc5iZX8wt5hVzivnEXGIeMYeYP8wd5g1zhvnCXGGeMEeYH8wN5gVzgvnAXGAezGPeipnetQ0zPYt+Ra+iT23HTH+iN9GX6En0I3oRfYgeRP+h99B36Dn0G3oNfYYeQ3+ht9BX6Cn0E3oJfWRHOe8pDly18jhZHutLW409OFezvnl0tD0+0m40G1P1kYnp1lh9dGx6c6vRaoy1xnaNtJrNdmu0NT4xPTFen2iMNtuNzthEs1OebEXfHv9r3//3tdqdrHpzsrJr0Glzv3uXc8M5+UClH2CnvbfCm2Ghwpthua7hQlH1l6DTXqjuGh6kX4J6nfvdt5wb3ldU/yu2eBDcuIu4wFV9aFXutff+F8q9VvtDdeCPS31pq9LPO9ev96Vl2tbKazBYPh6TjcH2zDWmGkONmcZIY6Ix0JhnjDOmGcOMWcYoY5IxyJhjjDGmGEOMGcYIY4IxwJjf+qJrejG8mF2MLiYXg4u5bSq6phZDi5nFyGJiMbCYV26MmFYMK2YVo4pJxaBiTjGmmFIMKWYUI4oJxYC2lNd2a9Fte2l5aXdpdWlzaXFpb2ltaWtpaWlnaWVpY2lhaV9pXWlbaVlpV2lVaVNpUWlPaU1pS2lJaUdpRWlDaUE7iq51xbZiWbGrWFVsKhY1U3StKbYUS4odxYpiQ7Gg2E+sJ7YTy4ndxGpiM7GY2EusJbYSS4mdxEpiI7GQ2aJrHbGNWEbsIlYRm4hFzBVda4gtxBJiB7GC2EAsIO0/rT9tPy0/7T6tPm0+LT7tPa09bT0tPe08rTxtPC18vvj31fu+r+k7rsPjuWcny//rS1uN3vmHl+f89dXyHtdhHu57nwN4bLKiPfTON1geVxb/XAN9j/WeO9S3v1r1+2v072VQXqu31pbHYbDe9fwLhHsPyn4gAAA=","debug_symbols":"nZNBjoQgEEXvUmsXoqK0V5lMDCp2SAgaGiaZGO/ehQFtF/TC1QeK96uAYoVR9O7ZST3NL2h/VuiNVEo+OzUP3MpZ4+q6ZRCnnTVC4BJ8xJFauBHaQqudUhn8ceX2Ta+F610tNxjNMxB6REXDSSrhR1t20nkarR51gGlDDpxeeZLmGYnJGUnyX/LTpon5WZXiyzRP8jIWQEhV3HEgtD4c0nfw1YEdDkV+y6HIT4fi3ikYPR3Ki8MvzvggzaX3gNQEnz9DLXCb1xLa2msVlAatoW28NkFZ0Ac++uZLMpL3SoSOnpwePhrc/i8xEr/AYuZBjM4IX9AewxLf","file_map":{"50":{"source":"use dep::std;\n// use std::hash::pedersen_commitment;\n\nglobal SHA256_WORD_LEN: u32 = 32;\n\nstruct Vote {\n    // timestamp in nanos\n    // timestamp: u128,\n    public_key_x: [u8; 32],\n    public_key_y: [u8; 32],\n    value: i8,\n    message_hash: [u8; SHA256_WORD_LEN],\n    signature: [u8; 64],\n}\n\n\nfn main(\n         public_key_x: [u8; 32],\n         public_key_y: [u8; 32],\n         is_upvote: bool,\n         message_hash: [u8; SHA256_WORD_LEN],\n         signature: [u8; 64],\n         ) {\n    let v = create_vote(public_key_x, public_key_y, is_upvote, message_hash, signature);\n    vote(v);\n}\n\nfn create_vote(public_key_x: [u8; 32], public_key_y: [u8; 32], is_upvote: bool, message_hash: [u8; SHA256_WORD_LEN], signature: [u8; 64]) -> Vote {\n    let mut vote_value: i8 = -1;\n    if is_upvote {\n        vote_value = 1;\n    }\n    let vote = Vote { \n        public_key_x,\n        public_key_y,\n        value: vote_value,\n        message_hash,\n        signature\n    };\n\n    vote\n}\n\nfn vote(vote: Vote) {\n    let valid_signature = \n        std::ecdsa_secp256k1::verify_signature(vote.public_key_x,  vote.public_key_y, vote.signature, vote.message_hash);\n     assert(valid_signature);\n    assert((vote.value == 1) | (vote.value == -1));\n}\n\n\n#[test]\nfn test_verify() {\n    let hashed_message = [13, 82, 120, 60, 76, 186, 215, 235, 175, 126, 185, 67, 252, 100, 143, 82, 130, 165, 32, 112, 68, 47, 193, 141, 141, 209, 109, 219, 47, 203, 175, 102];\n    let pub_key_x = [131, 24, 83, 91, 84, 16, 93, 74, 122, 174, 96, 192, 143, 196, 95, 150, 135, 24, 27, 79, 223, 198, 37, 189, 26, 117, 63, 167, 57, 127, 237, 117];\n    let pub_key_y = [53, 71, 241, 28, 168, 105, 102, 70, 242, 243, 172, 176, 142, 49, 1, 106, 250, 194, 62, 99, 12, 93, 17, 245, 159, 97, 254, 245, 123, 13, 42, 165];\n    let signature = [57, 17, 112, 239, 241, 30, 64, 157, 170, 50, 85, 145, 156, 69, 226, 85, 147, 164, 10, 82, 71, 93, 42, 132, 200, 220, 161, 255, 95, 241, 211, 141, 81, 7, 150, 25, 25, 27, 162, 213, 80, 61, 12, 170, 50, 4, 154, 203, 252, 229, 119, 29, 202, 153, 50, 25, 126, 145, 245, 23, 136, 75, 29, 177];\n\n    let valid_signature = std::ecdsa_secp256k1::verify_signature(pub_key_x, pub_key_y, signature, hashed_message);\n    assert(valid_signature);\n}\n\n// fn test_pederson_homomorphism() {\n\n// }\n\n","path":"/home/user/Projects/hackatons/block-spati-berlin-2025/PolkaVote_old/voting_circuit/src/main.nr"}},"names":["main"],"brillig_names":["directive_invert"]}