{"noir_version":"1.0.0-beta.6+e796dfd67726cbc28eb9991782533b211025928d","hash":"5981148998391523864","abi":{"parameters":[{"name":"public_key_x","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"public_key_y","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"is_upvote","type":{"kind":"boolean"},"visibility":"private"},{"name":"message_hash","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"signature","type":{"kind":"array","length":64,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"H4sIAAAAAAAA/9WX13MTZxxFVzbFpCeY9AIhhXTJsrGchgkppPfesEGK03tvJtXpvTeD8Uv+ynBHq8lBOclDvH7gm/Hsz0ea1afVSveeWtFdi/v//izn2v6/wfKYNdTHasIGhA0KWyFspbBVwlYLGxK2Rtghwg4Vdpiww4UdIexIYUcJO1rYMcLWChsWtk7YscKOE3a8sBOEnSjsJGEnCztF2KnCThO2XtgGYacL2yjsDGFnCjtL2NnCNgk7R9i5ws4Tdr6wC4RdKOwiYXVhDWEjwprCRoWNCdssbFxYS9iEsIuFXSLsUmGXCbtc2BZhk8Xfv3k9tlWed4WwbcKuFHaVsKuFXSNsu7BrhV0n7HphNwi7UdhNwm4WdouwW4XdJux2YXcIu1PYXcLuFnaPsHuF3SfsfmEPCHtQ2EPCHha2Q9iUsGlhO4XtEtYW1hH2iLAZYY8Ke0zY48KeEPaksKeEPS3sGWHPCntO2PPCXhD2orCXhL0s7BVhrwp7Tdjrwt4Q9qawt4S9LWxW2G5h7wh7V9h7wt4X9oGwD4XNCftI2MfCPhH2qbDPhH0u7AthXwr7StjXwr4R9q2w74R9L+wHYT8K+0nYz8J+EfarsN+E/S7sD2HzYKvKYwFWw9zvIL2ZzrGy73y9mW4xhJkuQYegO9AZ6Ap0BLoBnYAuQAdg92fnZ9dnx2e3Z6dnl2eHZ3dnZ2dXZ0dnN1+PeQNmdvCNmNm52bXZsdmtN2Fml2aHZndmZ2ZXZkdmN2YnZhdmB2b3Zedl12XHZbdlp2WXZYdld2VnZVdlR2U3ncLM3N+JmTnPfGeuM89nMDO/mdvMa+Y085m5zDxmDjN/mbvMW+Ys85W5yjxljjI/mZvMS+Yk85G5yDycxbwbM3OPececY74x15hnc5iZX8wt5hVzivnEXGIeMYeYP8wd5g1zhvnCXGGeMEeYH8wN5gVzgvnAXGAezGPeipnetQ0zPYt+Ra+iT23HTH+iN9GX6En0I3oRfYgeRP+h99B36Dn0G3oNfYYeQ3+ht9BX6Cn0E3oJfWRHOe8pDly18jhZHutLW409OFezvnl0tD0+0m40G1P1kYnp1lh9dGx6c6vRaoy1xnaNtJrNdmu0NT4xPTFen2iMNtuNzthEs1OebEXfHv9r3//3tdqdrHpzsrJr0Glzv3uXc8M5+UClH2CnvbfCm2Ghwpthua7hQlH1l6DTXqjuGh6kX4J6nfvdt5wb3ldU/yu2eBDcuIu4wFV9aFXutff+F8q9VvtDdeCPS31pq9LPO9ev96Vl2tbKazBYPh6TjcH2zDWmGkONmcZIY6Ix0JhnjDOmGcOMWcYoY5IxyJhjjDGmGEOMGcYIY4IxwJjf+qJrejG8mF2MLiYXg4u5bSq6phZDi5nFyGJiMbCYV26MmFYMK2YVo4pJxaBiTjGmmFIMKWYUI4oJxYC2lNd2a9Fte2l5aXdpdWlzaXFpb2ltaWtpaWlnaWVpY2lhaV9pXWlbaVlpV2lVaVNpUWlPaU1pS2lJaUdpRWlDaUE7iq51xbZiWbGrWFVsKhY1U3StKbYUS4odxYpiQ7Gg2E+sJ7YTy4ndxGpiM7GY2EusJbYSS4mdxEpiI7GQ2aJrHbGNWEbsIlYRm4hFzBVda4gtxBJiB7GC2EAsIO0/rT9tPy0/7T6tPm0+LT7tPa09bT0tPe08rTxtPC18vvj31fu+r+k7rsPjuWcny//rS1uN3vmHl+f89dXyHtdhHu57nwN4bLKiPfTON1geVxb/XAN9j/WeO9S3v1r1+2v072VQXqu31pbHYbDe9fwLhHsPyn4gAAA=","debug_symbols":"nZNBjoQgEEXvUmsXoqLoVSYTg4odEoKGlkkmxrt3YaBpF/TC1ReK98BQ7DCJwT56qeflCd3PDoORSslHr5aRb3LROLsfGYRhvxkhcAo+6kit3Ai9QaetUhn8cWXPRc+V6zM3brCaZyD0hInCWSrhvo4s0nkarVrqYdpEnF55kuZZ3nqekST/ZX/a1GF/Vqb4Ms2T/C0ghLE7hiIvgqEgzS1DGQ3VPQONhvreX5QkGtqL4RdHfJTm0ntAaoLXn2EWuMxlCV3tsvJJfdbQNS4bn8xni5d+uCMZyQclfEfPVo8fDb79r6ESnsBqllFM1gh3oLOGR3wB","file_map":{"50":{"source":"use dep::std;\nuse std::hash;\n// use dep::ecrecover;\n\nglobal SHA256_WORD_LEN: u32 = 32;\n\nstruct Vote {\n    // timestamp in nanos\n    // timestamp: u128,\n    public_key_x: [u8; 32],\n    public_key_y: [u8; 32],\n    value: i8,\n    message_hash: [u8; SHA256_WORD_LEN],\n    signature: [u8; 64],\n}\n\n\nfn main(\n         public_key_x: [u8; 32],\n         public_key_y: [u8; 32],\n         is_upvote: bool,\n         message_hash: [u8; SHA256_WORD_LEN],\n         signature: [u8; 64],\n         ) {\n    let v = create_vote(public_key_x, public_key_y, is_upvote, message_hash, signature);\n    vote(v);\n}\n\nfn create_vote(public_key_x: [u8; 32], public_key_y: [u8; 32], is_upvote: bool, message_hash: [u8; SHA256_WORD_LEN], signature: [u8; 64]) -> Vote {\n    let mut vote_value: i8 = -1;\n    if is_upvote {\n        vote_value = 1;\n    }\n    let vote = Vote { \n        public_key_x,\n        public_key_y,\n        value: vote_value,\n        message_hash,\n        signature\n    };\n\n    vote\n}\n\n// fn vote(vote: Vote, signature: Signature) {\nfn vote(vote: Vote) {\n    let valid_signature = \n        std::ecdsa_secp256k1::verify_signature(vote.public_key_x,  vote.public_key_y, vote.signature, vote.message_hash);\n     assert(valid_signature);\n    assert((vote.value == 1) | (vote.value == -1));\n}\n\n\n\nfn python_example(message_hash : [u8;32], pub_key_x : [u8;32], pub_key_y : [u8;32], signature : [u8;64]) {\n    // hash the message again (this happens when we generate a deterministic signature)\n    // the reason we do this is to ensure persistent input message length (always 32 bytes)\n\n    // let message_hash_2 = std::hash::sha256(message_hash);\n    // let address: Field = ecrecover::ecrecover(pub_key_x, pub_key_y, signature, message_hash);\n    let valid_signature = std::ecdsa_secp256k1::verify_signature(pub_key_x, pub_key_y, signature, message_hash);\n    assert(valid_signature);\n}\n\n\n#[test]\nfn test_verify() {\n//     python_example(\n// [223, 253, 96, 33, 187, 43, 213, 176, 175, 103, 98, 144, 128, 158, 195, 165, 49, 145, 221, 129, 199, 247, 10, 75, 40, 104, 138, 54, 33, 130, 152, 111],\n// [77, 154, 126, 232, 196, 225, 168, 59, 92, 209, 131, 12, 75, 100, 207, 199, 5, 43, 99, 228, 204, 68, 6, 215, 158, 218, 115, 138, 189, 163, 55, 245],\n// [16, 228, 74, 23, 195, 86, 207, 3, 197, 97, 183, 204, 88, 193, 180, 218, 193, 183, 83, 215, 24, 137, 139, 93, 43, 143, 42, 151, 214, 102, 243, 75],\n// [230, 120, 141, 193, 123, 240, 107, 68, 229, 28, 43, 118, 121, 95, 209, 71, 158, 89, 0, 244, 242, 87, 223, 154, 39, 236, 163, 8, 122, 66, 225, 21, 38, 48, 182, 148, 244, 248, 85, 165, 224, 231, 211, 166, 42, 170, 118, 153, 140, 184, 20, 128, 195, 182, 233, 102, 181, 197, 208, 199, 240, 171, 150, 87]\n//     );\n    let hashed_message = [13, 82, 120, 60, 76, 186, 215, 235, 175, 126, 185, 67, 252, 100, 143, 82, 130, 165, 32, 112, 68, 47, 193, 141, 141, 209, 109, 219, 47, 203, 175, 102];\n    let pub_key_x = [131, 24, 83, 91, 84, 16, 93, 74, 122, 174, 96, 192, 143, 196, 95, 150, 135, 24, 27, 79, 223, 198, 37, 189, 26, 117, 63, 167, 57, 127, 237, 117];\n    let pub_key_y = [53, 71, 241, 28, 168, 105, 102, 70, 242, 243, 172, 176, 142, 49, 1, 106, 250, 194, 62, 99, 12, 93, 17, 245, 159, 97, 254, 245, 123, 13, 42, 165];\n    let signature = [57, 17, 112, 239, 241, 30, 64, 157, 170, 50, 85, 145, 156, 69, 226, 85, 147, 164, 10, 82, 71, 93, 42, 132, 200, 220, 161, 255, 95, 241, 211, 141, 81, 7, 150, 25, 25, 27, 162, 213, 80, 61, 12, 170, 50, 4, 154, 203, 252, 229, 119, 29, 202, 153, 50, 25, 126, 145, 245, 23, 136, 75, 29, 177];\n\n    python_example(\n         hashed_message,\n         pub_key_x,\n         pub_key_y,\n         signature\n    );\n\n    // fn test_with_evaluted_values() {\n    //     let message=\"hello\";\n    //     let address = \"0xb1305CA4Ca83F015feA50cc79310Bc8047c6fA8b\";\n    //     let message_hash = hash::keccak(message);\n    //     let pub_key_x = \n    //     let pub_key_y = \n    //     let signature =\n    //     python_example(message_hash, pub_key_x, pub_key_y, signature);\n    // }\n}\n\n// fn test_verify_2() {\n//     let expected_address = \"0x52d64Ed1FD087797e2030fc914259e052F2bD67\";\n//     let hashed_message = [\"28\", \"139\", \"255\", \"149\", \"6\", \"133\", \"194\", \"237\", \"75\", \"195\", \"23\", \"79\", \"52\", \"114\", \"40\", \"123\", \"86\", \"217\", \"81\", \"123\", \"156\", \"148\", \"129\", \"39\", \"49\", \"154\", \"9\", \"167\", \"163\", \"109\", \"234\", \"200\"]\n//     let pub_key_x = [\"83\", \"51\", \"103\", \"4\", \"44\", \"62\", \"148\", \"86\", \"254\", \"193\", \"133\", \"148\", \"1\", \"101\", \"194\", \"140\", \"1\", \"254\", \"110\", \"40\", \"96\", \"19\", \"55\", \"223\", \"80\", \"86\", \"45\", \"220\", \"79\", \"54\", \"191\", \"185\"]\n//     let pub_key_y = [\"125\", \"202\", \"254\", \"39\", \"202\", \"219\", \"225\", \"8\", \"97\", \"187\", \"103\", \"224\", \"89\", \"147\", \"130\", \"247\", \"157\", \"194\", \"156\", \"29\", \"57\", \"217\", \"147\", \"16\", \"247\", \"22\", \"200\", \"206\", \"255\", \"23\", \"67\", \"237\"]\n//     let signature = [\"221\", \"147\", \"95\", \"119\", \"131\", \"81\", \"33\", \"126\", \"192\", \"46\", \"111\", \"133\", \"126\", \"71\", \"240\", \"206\", \"168\", \"55\", \"56\", \"15\", \"48\", \"236\", \"207\", \"99\", \"116\", \"43\", \"154\", \"151\", \"207\", \"24\", \"114\", \"180\", \"49\", \"103\", \"0\", \"176\", \"40\", \"80\", \"69\", \"145\", \"246\", \"179\", \"18\", \"3\", \"184\", \"108\", \"203\", \"51\", \"99\", \"53\", \"238\", \"221\", \"143\", \"156\", \"244\", \"243\", \"52\", \"74\", \"118\", \"156\", \"104\", \"149\", \"37\", \"179\"]\n\n//     python_example(\n//          hashed_message,\n//          pub_key_x,\n//          pub_key_y,\n//          signature\n//     );\n// }\n","path":"/home/user/Projects/hackatons/block-spati-berlin-2025/PolkaVote_old/voting_circuit/src/main.nr"}},"names":["main"],"brillig_names":["directive_invert"]}