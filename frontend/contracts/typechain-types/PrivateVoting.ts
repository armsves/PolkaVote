/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace PrivateVoting {
  export type ProposalStruct = {
    id: BigNumberish;
    creator: AddressLike;
    description: string;
    voting_system: BigNumberish;
    start_date: BigNumberish;
    end_date: BigNumberish;
    finished: boolean;
    result: BigNumberish;
  };

  export type ProposalStructOutput = [
    id: bigint,
    creator: string,
    description: string,
    voting_system: bigint,
    start_date: bigint,
    end_date: bigint,
    finished: boolean,
    result: bigint
  ] & {
    id: bigint;
    creator: string;
    description: string;
    voting_system: bigint;
    start_date: bigint;
    end_date: bigint;
    finished: boolean;
    result: bigint;
  };

  export type VoteStruct = {
    voter: AddressLike;
    timestamp: BigNumberish;
    proposal_nonce: BigNumberish;
    voter_nonce: BigNumberish;
    vote: boolean;
  };

  export type VoteStructOutput = [
    voter: string,
    timestamp: bigint,
    proposal_nonce: bigint,
    voter_nonce: bigint,
    vote: boolean
  ] & {
    voter: string;
    timestamp: bigint;
    proposal_nonce: bigint;
    voter_nonce: bigint;
    vote: boolean;
  };
}

export interface PrivateVotingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accountVoted"
      | "createProposal"
      | "finishProposal"
      | "getProposal"
      | "getProposalVotes"
      | "getProposals"
      | "hasVoted"
      | "proposalCount"
      | "proposalIds"
      | "proposalVotes"
      | "proposals"
      | "vote"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ProposalCreated" | "VoteCast"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "accountVoted",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createProposal",
    values: [
      BigNumberish,
      AddressLike,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "finishProposal",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalVotes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalVotes",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finishProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [id: BigNumberish, creator: AddressLike];
  export type OutputTuple = [id: bigint, creator: string];
  export interface OutputObject {
    id: bigint;
    creator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    voter: AddressLike,
    proposal_nonce: BigNumberish,
    vote: boolean
  ];
  export type OutputTuple = [
    voter: string,
    proposal_nonce: bigint,
    vote: boolean
  ];
  export interface OutputObject {
    voter: string;
    proposal_nonce: bigint;
    vote: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PrivateVoting extends BaseContract {
  connect(runner?: ContractRunner | null): PrivateVoting;
  waitForDeployment(): Promise<this>;

  interface: PrivateVotingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accountVoted: TypedContractMethod<
    [id: BigNumberish, voter: AddressLike, proposal_nonce: BigNumberish],
    [boolean],
    "view"
  >;

  createProposal: TypedContractMethod<
    [
      id: BigNumberish,
      creator: AddressLike,
      description: string,
      voting_system: BigNumberish,
      start_date: BigNumberish,
      end_date: BigNumberish,
      finished: boolean,
      result: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  finishProposal: TypedContractMethod<
    [id: BigNumberish, result: BigNumberish],
    [void],
    "nonpayable"
  >;

  getProposal: TypedContractMethod<
    [id: BigNumberish],
    [PrivateVoting.ProposalStructOutput],
    "view"
  >;

  getProposalVotes: TypedContractMethod<
    [proposal_nonce: BigNumberish],
    [PrivateVoting.VoteStructOutput[]],
    "view"
  >;

  getProposals: TypedContractMethod<
    [],
    [PrivateVoting.ProposalStructOutput[]],
    "view"
  >;

  hasVoted: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike, arg2: BigNumberish],
    [boolean],
    "view"
  >;

  proposalCount: TypedContractMethod<[], [bigint], "view">;

  proposalIds: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  proposalVotes: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, bigint, bigint, bigint, boolean] & {
        voter: string;
        timestamp: bigint;
        proposal_nonce: bigint;
        voter_nonce: bigint;
        vote: boolean;
      }
    ],
    "view"
  >;

  proposals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, bigint, boolean, bigint] & {
        id: bigint;
        creator: string;
        description: string;
        voting_system: bigint;
        start_date: bigint;
        end_date: bigint;
        finished: boolean;
        result: bigint;
      }
    ],
    "view"
  >;

  vote: TypedContractMethod<
    [
      voter: AddressLike,
      timestamp: BigNumberish,
      proposal_nonce: BigNumberish,
      voter_nonce: BigNumberish,
      _vote: boolean
    ],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accountVoted"
  ): TypedContractMethod<
    [id: BigNumberish, voter: AddressLike, proposal_nonce: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "createProposal"
  ): TypedContractMethod<
    [
      id: BigNumberish,
      creator: AddressLike,
      description: string,
      voting_system: BigNumberish,
      start_date: BigNumberish,
      end_date: BigNumberish,
      finished: boolean,
      result: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "finishProposal"
  ): TypedContractMethod<
    [id: BigNumberish, result: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getProposal"
  ): TypedContractMethod<
    [id: BigNumberish],
    [PrivateVoting.ProposalStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProposalVotes"
  ): TypedContractMethod<
    [proposal_nonce: BigNumberish],
    [PrivateVoting.VoteStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProposals"
  ): TypedContractMethod<[], [PrivateVoting.ProposalStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike, arg2: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "proposalCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposalIds"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposalVotes"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, bigint, bigint, bigint, boolean] & {
        voter: string;
        timestamp: bigint;
        proposal_nonce: bigint;
        voter_nonce: bigint;
        vote: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, bigint, boolean, bigint] & {
        id: bigint;
        creator: string;
        description: string;
        voting_system: bigint;
        start_date: bigint;
        end_date: bigint;
        finished: boolean;
        result: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [
      voter: AddressLike,
      timestamp: BigNumberish,
      proposal_nonce: BigNumberish,
      voter_nonce: BigNumberish,
      _vote: boolean
    ],
    [boolean],
    "nonpayable"
  >;

  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;

  filters: {
    "ProposalCreated(uint64,address)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;

    "VoteCast(address,uint64,bool)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
  };
}
